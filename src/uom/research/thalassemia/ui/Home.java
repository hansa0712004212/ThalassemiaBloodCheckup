package uom.research.thalassemia.ui;

import java.awt.Desktop;
import uom.research.thalassemia.util.ImageFileChooser;
import uom.research.thalassemia.util.StretchImage;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Date;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.SwingUtilities;
import org.opencv.core.Core;
import uom.research.thalassemia.object.User;
import uom.research.thalassemia.logic.BloodCellsManipulation;
import uom.research.thalassemia.logic.BloodCellsManipulationImpl;
import uom.research.thalassemia.logic.ImageSegment;
import uom.research.thalassemia.object.Patient;
import uom.research.thalassemia.util.Message;

/**
 *
 * @author anupama
 */
public final class Home extends JFrame {

    /**
     * Selected Image File .
     */
    private File imageFile;

    /**
     * Thread to be executed.
     */
    private Thread thread;

    /**
     * Progress bar to indicate thread is busy.
     */
    private Progress progress;

    /**
     * Keeps current working JFrame.
     */
    private final JFrame jFrame;
    /**
     * JFrame Resolution info.
     */
    private static final int FRAME_WIDTH = 1300, FRAME_HEIGHT = 720;

    /**
     * BloodCellsManipulation.
     */
    private BloodCellsManipulation bcm = null;

    /**
     * User object.
     */
    private final User user;

    /**
     * Patient object.
     */
    private final Patient patient;

    /**
     * Creates new form Home.
     *
     * @param puser user
     * @param ppatient patient
     */
    public Home(final User puser, final Patient ppatient) {
        initComponents();
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
        setSize(FRAME_WIDTH, FRAME_HEIGHT);
        setTitle("Thalassemia Affected Blood Sample Analyzer v1.0");
        setLocationRelativeTo(null);
        btnProcess.setEnabled(false);
        btnSegmentImage.setEnabled(false);
        mnuProcess.setEnabled(false);
        mnuSegment.setEnabled(false);
        btnCellData.setEnabled(false);
        jFrame = Home.this;
        user = puser;
        patient = ppatient;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnProcess = new javax.swing.JButton();
        lblDisplayImage = new javax.swing.JLabel();
        lblImagePath = new javax.swing.JLabel();
        btnOpenImage = new javax.swing.JButton();
        lblDisplayImageProcessed = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lblDisplayImageCanny = new javax.swing.JLabel();
        lblDisplayImageGray = new javax.swing.JLabel();
        lblDisplayImageSmooth = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        lblCountCells = new javax.swing.JLabel();
        lblMaximumRadius = new javax.swing.JLabel();
        lblTimeElapsed = new javax.swing.JLabel();
        lblMinimumRadius = new javax.swing.JLabel();
        btnSegmentImage = new javax.swing.JButton();
        lblResolution = new javax.swing.JLabel();
        btnCellData = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        mnuFile = new javax.swing.JMenu();
        mnuOpen = new javax.swing.JMenuItem();
        mnuReset = new javax.swing.JMenuItem();
        mnuExit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        mnuSegment = new javax.swing.JMenuItem();
        mnuProcess = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        mnuHelpContents = new javax.swing.JMenuItem();
        mnuGit = new javax.swing.JMenuItem();
        mnuAbout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnProcess.setIcon(new javax.swing.ImageIcon(getClass().getResource("/uom/research/thalassemia/images/process.png"))); // NOI18N
        btnProcess.setText("Process");
        btnProcess.setIconTextGap(20);
        btnProcess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProcessActionPerformed(evt);
            }
        });
        getContentPane().add(btnProcess, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 460, 400, 30));

        lblDisplayImage.setBackground(java.awt.SystemColor.controlLtHighlight);
        lblDisplayImage.setText(" ");
        lblDisplayImage.setOpaque(true);
        getContentPane().add(lblDisplayImage, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 400, 300));

        lblImagePath.setText("Path");
        getContentPane().add(lblImagePath, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 330, 400, -1));

        btnOpenImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/uom/research/thalassemia/images/open.png"))); // NOI18N
        btnOpenImage.setText("Open Image");
        btnOpenImage.setIconTextGap(15);
        btnOpenImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenImageActionPerformed(evt);
            }
        });
        getContentPane().add(btnOpenImage, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 380, 400, 30));

        lblDisplayImageProcessed.setBackground(java.awt.SystemColor.controlLtHighlight);
        lblDisplayImageProcessed.setText(" ");
        lblDisplayImageProcessed.setOpaque(true);
        getContentPane().add(lblDisplayImageProcessed, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 360, 400, 300));

        jLabel1.setText("Original Image Stretched Preview");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        jLabel2.setText("Threshold Preview");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 340, -1, -1));

        lblDisplayImageCanny.setBackground(java.awt.SystemColor.controlLtHighlight);
        lblDisplayImageCanny.setText(" ");
        lblDisplayImageCanny.setOpaque(true);
        getContentPane().add(lblDisplayImageCanny, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 30, 400, 300));

        lblDisplayImageGray.setBackground(java.awt.SystemColor.controlLtHighlight);
        lblDisplayImageGray.setText(" ");
        lblDisplayImageGray.setOpaque(true);
        getContentPane().add(lblDisplayImageGray, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 30, 400, 300));

        lblDisplayImageSmooth.setBackground(java.awt.SystemColor.controlLtHighlight);
        lblDisplayImageSmooth.setText(" ");
        lblDisplayImageSmooth.setOpaque(true);
        getContentPane().add(lblDisplayImageSmooth, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 360, 400, 300));

        jLabel3.setText("Identified Blood Cells Preview");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 340, -1, -1));

        jLabel4.setText("Gray Scaled Preview");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 10, -1, -1));

        jLabel5.setText("Edge Detection Preview");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 10, -1, -1));

        jLabel6.setText(" <  --");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 340, 40, -1));

        jLabel7.setText("   -->");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 170, 40, -1));

        jLabel8.setText("   -->");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 170, 40, -1));

        lblCountCells.setText("Cells Count             : ");
        getContentPane().add(lblCountCells, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 580, -1, -1));

        lblMaximumRadius.setText("Maximum Radius  : ");
        getContentPane().add(lblMaximumRadius, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 600, -1, -1));

        lblTimeElapsed.setText("Time Elapsed         :");
        getContentPane().add(lblTimeElapsed, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 640, -1, -1));

        lblMinimumRadius.setText("Minimum Radius   : ");
        getContentPane().add(lblMinimumRadius, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 620, -1, -1));

        btnSegmentImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/uom/research/thalassemia/images/segment.png"))); // NOI18N
        btnSegmentImage.setText("Segment Image");
        btnSegmentImage.setIconTextGap(10);
        btnSegmentImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSegmentImageActionPerformed(evt);
            }
        });
        getContentPane().add(btnSegmentImage, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 420, 400, 30));
        getContentPane().add(lblResolution, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 350, 400, 20));

        btnCellData.setText("Blood Cell Data");
        btnCellData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCellDataActionPerformed(evt);
            }
        });
        getContentPane().add(btnCellData, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 525, 400, 30));

        mnuFile.setText("  File        ");

        mnuOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        mnuOpen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/uom/research/thalassemia/images/open.png"))); // NOI18N
        mnuOpen.setText("  Open ...     ");
        mnuOpen.setToolTipText("");
        mnuOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuOpenActionPerformed(evt);
            }
        });
        mnuFile.add(mnuOpen);

        mnuReset.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0));
        mnuReset.setIcon(new javax.swing.ImageIcon(getClass().getResource("/uom/research/thalassemia/images/reset.png"))); // NOI18N
        mnuReset.setText("  Reset     ");
        mnuReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuResetActionPerformed(evt);
            }
        });
        mnuFile.add(mnuReset);

        mnuExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        mnuExit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/uom/research/thalassemia/images/exit.png"))); // NOI18N
        mnuExit.setText("  Exit     ");
        mnuExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuExitActionPerformed(evt);
            }
        });
        mnuFile.add(mnuExit);

        jMenuBar1.add(mnuFile);

        jMenu2.setText("  Edit        ");

        mnuSegment.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F3, 0));
        mnuSegment.setIcon(new javax.swing.ImageIcon(getClass().getResource("/uom/research/thalassemia/images/segment.png"))); // NOI18N
        mnuSegment.setText("  Segment Image     ");
        mnuSegment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuSegmentActionPerformed(evt);
            }
        });
        jMenu2.add(mnuSegment);

        mnuProcess.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F2, 0));
        mnuProcess.setIcon(new javax.swing.ImageIcon(getClass().getResource("/uom/research/thalassemia/images/process.png"))); // NOI18N
        mnuProcess.setText("  Process     ");
        mnuProcess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuProcessActionPerformed(evt);
            }
        });
        jMenu2.add(mnuProcess);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("  Help        ");

        mnuHelpContents.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F10, 0));
        mnuHelpContents.setIcon(new javax.swing.ImageIcon(getClass().getResource("/uom/research/thalassemia/images/help.png"))); // NOI18N
        mnuHelpContents.setText("  Help Contents     ");
        mnuHelpContents.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuHelpContentsActionPerformed(evt);
            }
        });
        jMenu3.add(mnuHelpContents);

        mnuGit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F11, 0));
        mnuGit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/uom/research/thalassemia/images/git.png"))); // NOI18N
        mnuGit.setText("  Git     ");
        mnuGit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuGitActionPerformed(evt);
            }
        });
        jMenu3.add(mnuGit);

        mnuAbout.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F12, 0));
        mnuAbout.setIcon(new javax.swing.ImageIcon(getClass().getResource("/uom/research/thalassemia/images/info.png"))); // NOI18N
        mnuAbout.setText("  About     ");
        mnuAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuAboutActionPerformed(evt);
            }
        });
        jMenu3.add(mnuAbout);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnProcessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProcessActionPerformed
        processImageFile();
    }//GEN-LAST:event_btnProcessActionPerformed

    private void btnOpenImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenImageActionPerformed
        selectImageFile();
    }//GEN-LAST:event_btnOpenImageActionPerformed

    private void btnSegmentImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSegmentImageActionPerformed
        createSegmentsOfImageFile();
    }//GEN-LAST:event_btnSegmentImageActionPerformed

    private void mnuHelpContentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuHelpContentsActionPerformed
        if (Desktop.isDesktopSupported()) {
            try {
                Desktop.getDesktop().open(new File(
                        Home.class.getResource("/index.html").getFile()));
            } catch (Exception ex) {
                System.out.println(ex.getMessage());
            }
        }
    }//GEN-LAST:event_mnuHelpContentsActionPerformed

    private void mnuExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_mnuExitActionPerformed

    private void mnuAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuAboutActionPerformed
        new About(jFrame, true).setVisible(true);
    }//GEN-LAST:event_mnuAboutActionPerformed

    private void mnuResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuResetActionPerformed
        lblDisplayImage.setIcon(null);
        lblDisplayImageCanny.setIcon(null);
        lblDisplayImageGray.setIcon(null);
        lblDisplayImageProcessed.setIcon(null);
        lblDisplayImageSmooth.setIcon(null);
        lblCountCells.setText("Cells Count             : ");
        lblImagePath.setText("Path");
        lblMaximumRadius.setText("Maximum Radius  : ");
        lblMinimumRadius.setText("Minimum Radius   : ");
        lblTimeElapsed.setText("Time Elapsed         :");
        lblResolution.setText(null);
        btnProcess.setEnabled(false);
        btnSegmentImage.setEnabled(false);
        mnuProcess.setEnabled(false);
        mnuSegment.setEnabled(false);
    }//GEN-LAST:event_mnuResetActionPerformed

    private void mnuGitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuGitActionPerformed
        if (Desktop.isDesktopSupported()) {
            try {
                Desktop d = Desktop.getDesktop();
                d.browse(new URI(
                        "https://github.com/hansa0712004212/thalassemia"));
            } catch (IOException | URISyntaxException ex) {
                System.out.println("web");
            }
        }
    }//GEN-LAST:event_mnuGitActionPerformed

    private void mnuOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuOpenActionPerformed
        // open File Chooser and load image.
        selectImageFile();
    }//GEN-LAST:event_mnuOpenActionPerformed

    private void mnuSegmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSegmentActionPerformed
        // open image as segments.
        createSegmentsOfImageFile();
    }//GEN-LAST:event_mnuSegmentActionPerformed

    private void mnuProcessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuProcessActionPerformed
        // do thalassemia image analysis for loaded image.
        processImageFile();
    }//GEN-LAST:event_mnuProcessActionPerformed

    private void btnCellDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCellDataActionPerformed
        if (bcm != null) {
            //new CircleData(bcm.getCircles()).setVisible(true);
        }
    }//GEN-LAST:event_btnCellDataActionPerformed

    /**
     * Select and Open Image File.
     */
    private void selectImageFile() {
        File prevFile = imageFile;
        imageFile = ImageFileChooser.openImageFile(this);
        if (imageFile != null) {
            new Thread(() -> {
                try {
                    SwingUtilities.invokeLater(() -> {
                        progress = new Progress(jFrame, true);
                        progress.setVisible(true);
                    });
                    if (imageFile.isFile()) {
                        lblImagePath.setText("Path :- "
                                + imageFile.getAbsolutePath());
                        StretchImage.setImageStretch(
                                lblDisplayImage, imageFile.getAbsolutePath());
                        BufferedImage bufferedImage = ImageIO.read(imageFile);
                        StringBuilder stringBuilder = new StringBuilder();
                        stringBuilder.append("Original Image Resolution"
                                + " (Width x Height) : ")
                                .append(bufferedImage.getWidth()).append(" x ")
                                .append(bufferedImage.getHeight());
                        lblResolution.setText(stringBuilder.toString());
                        btnProcess.setEnabled(true);
                        btnSegmentImage.setEnabled(true);
                        mnuProcess.setEnabled(true);
                        mnuSegment.setEnabled(true);
                    }
                } catch (Exception e) {
                    System.out.println("btnOpenImage " + e.getMessage()
                            + " | " + imageFile.getAbsolutePath());
                }
                progress.dispose();
            }).start();
        } else {
            if (prevFile != null) {
                imageFile = prevFile;
            }
        }
    }

    /**
     * Do Image Segmentation and Open Up Appropriate Window.
     */
    private void createSegmentsOfImageFile() {
        try {
            if (imageFile.isFile()) {
                new Thread(new ImageSegment(this, imageFile)).start();
            }
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }

    /**
     * Do Image Processing and Find Blood Cells.
     */
    private void processImageFile() {
        /**
         * process running on another thread to avoid UI getting stuck
         */
        thread = new Thread(() -> {
            try {
                SwingUtilities.invokeLater(() -> {
                    progress = new Progress(jFrame, true);
                    progress.setVisible(true);
                });
                Long start = new Date().getTime();
                bcm = new BloodCellsManipulationImpl(imageFile);
                bcm.doBloodCellProcessing();
                StretchImage.setImageStretch(lblDisplayImageGray,
                        new ImageIcon(bcm.getGrayImage()));
                StretchImage.setImageStretch(lblDisplayImageCanny,
                        new ImageIcon(bcm.getCannyImage()));
                StretchImage.setImageStretch(lblDisplayImageSmooth,
                        new ImageIcon(bcm.getThresholdImage()));
                StretchImage.setImageStretch(lblDisplayImageProcessed,
                        new ImageIcon(bcm.getRedImage()));
                lblCountCells.setText(String.valueOf(bcm.getCircleCount()));
                lblMaximumRadius.setText(
                        String.valueOf(bcm.getMaximumRadius()));
                lblMinimumRadius.setText(
                        String.valueOf(bcm.getMinimumRadius()));
                Long end = new Date().getTime();
                lblTimeElapsed.setText(
                        String.valueOf(new Date(end - start).getTime()));
                progress.dispose();
                btnCellData.setEnabled(true);
                Thread.currentThread().interrupt();
            } catch (Exception ex) {
                progress.dispose();
                Message.showErrorMessage(" error is " + ex);
            }
        });
        if (!thread.isAlive()) {
            thread.start();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCellData;
    private javax.swing.JButton btnOpenImage;
    private javax.swing.JButton btnProcess;
    private javax.swing.JButton btnSegmentImage;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JLabel lblCountCells;
    private javax.swing.JLabel lblDisplayImage;
    private javax.swing.JLabel lblDisplayImageCanny;
    private javax.swing.JLabel lblDisplayImageGray;
    private javax.swing.JLabel lblDisplayImageProcessed;
    private javax.swing.JLabel lblDisplayImageSmooth;
    private javax.swing.JLabel lblImagePath;
    private javax.swing.JLabel lblMaximumRadius;
    private javax.swing.JLabel lblMinimumRadius;
    private javax.swing.JLabel lblResolution;
    private javax.swing.JLabel lblTimeElapsed;
    private javax.swing.JMenuItem mnuAbout;
    private javax.swing.JMenuItem mnuExit;
    private javax.swing.JMenu mnuFile;
    private javax.swing.JMenuItem mnuGit;
    private javax.swing.JMenuItem mnuHelpContents;
    private javax.swing.JMenuItem mnuOpen;
    private javax.swing.JMenuItem mnuProcess;
    private javax.swing.JMenuItem mnuReset;
    private javax.swing.JMenuItem mnuSegment;
    // End of variables declaration//GEN-END:variables
}

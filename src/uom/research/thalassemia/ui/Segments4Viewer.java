package uom.research.thalassemia.ui;

import java.io.File;
import java.util.ArrayList;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import uom.research.thalassemia.logic.BloodCellsManipulation;
import uom.research.thalassemia.logic.BloodCellsManipulationImpl;
import uom.research.thalassemia.util.StretchImage;

/**
 *
 * @author anupama
 */
public class Segments4Viewer extends javax.swing.JDialog {

    /**
     * keep records of image segment files.
     */
    private List<String> segmentFiles;

    /**
     * keep records of labels in the UI.
     */
    private List<JLabel> labelList;

    /**
     * JFrame Resolution info.
     */
    private static final int FRAME_WIDTH = 800, FRAME_HEIGHT = 610;

    /**
     * Segment Id constants.
     */
    private static final int SEGMENT_0 = 0, SEGMENT_1 = 1, SEGMENT_2 = 2, SEGMENT_3 = 3;

    /**
     * Creates new Segments4Viewer.
     *
     * @param parent parent frame
     * @param modal modal true or false
     * @param files segment files
     */
    public Segments4Viewer(final java.awt.Frame parent, final boolean modal, final List<String> files) {
        super(parent, modal);
        initComponents();
        setSize(FRAME_WIDTH, FRAME_HEIGHT);
        setLocationRelativeTo(null);
        setTitle("Image Segments Viewer ");
        labelList = new ArrayList<>();
        labelList.add(lblSegmant1);
        labelList.add(lblSegmant2);
        labelList.add(lblSegmant3);
        labelList.add(lblSegmant4);
        segmentFiles = files;
        //loadFiles();
        threadScheduler();
        //this.setIconImage(ResizeImage.resizeImage("/resources/icon.jpg").getImage());
    }

    /**
     * Threads maker.
     */
    private void threadScheduler() {
        new Thread(() -> {
            try {
                doImageProcessing(SEGMENT_0);
                doImageProcessing(SEGMENT_1);
                doImageProcessing(SEGMENT_2);
                doImageProcessing(SEGMENT_3);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, " error is " + ex.getMessage());
            }
        }).start();
    }

    /**
     * Load segment files of original image file.
     */
    private void loadFiles() {
        for (int i = 0; i < labelList.size(); i++) {
            StretchImage.setImageStretch(labelList.get(i), segmentFiles.get(i));
        }
    }

    /**
     * Identify Blood Cells.
     *
     * @param position segment position
     */
    private void doImageProcessing(final int position) throws Exception {

        BloodCellsManipulation bcm = new BloodCellsManipulationImpl(new File(segmentFiles.get(position)));
        bcm.doBloodCellProcessing();
        StretchImage.setImageStretch(labelList.get(position), new ImageIcon(bcm.getRedImage()));
        setLabelTextValues(bcm, position);
    }

    /**
     * set text values for labels.
     *
     * @param bcm currently processing segment BufferedImage
     * @param position segment position
     */
    private void setLabelTextValues(final BloodCellsManipulation bcm, final int position) {
        switch (position) {
            case SEGMENT_0:
                lblCountCells1.setText("Cells Count               : " + bcm.getCircleCount());
                lblMaximumRadius1.setText("Maximum Radius    : " + bcm.getMaximumRadius());
                lblMinimumRadius1.setText("Minimum Radius     : " + bcm.getMinimumRadius());
            case SEGMENT_1:
                lblCountCells2.setText(bcm.getCircleCount() + "  :                  Cells Count");
                lblMaximumRadius2.setText(bcm.getMaximumRadius() + ":       Maximum Radius");
                lblMinimumRadius2.setText(bcm.getMinimumRadius() + " :        Minimum Radius");
            case SEGMENT_2:
                lblCountCells3.setText("Cells Count               : " + bcm.getCircleCount());
                lblMaximumRadius3.setText("Maximum Radius    : " + bcm.getMaximumRadius());
                lblMinimumRadius3.setText("Minimum Radius     : " + bcm.getMinimumRadius());
            case SEGMENT_3:
                lblCountCells4.setText(bcm.getCircleCount() + "  :                  Cells Count");
                lblMaximumRadius4.setText(bcm.getMaximumRadius() + ":       Maximum Radius");
                lblMinimumRadius4.setText(bcm.getMinimumRadius() + " :        Minimum Radius");
            default:
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MainPanel = new javax.swing.JPanel();
        lblSegmant2 = new javax.swing.JLabel();
        lblSegmant3 = new javax.swing.JLabel();
        lblSegmant4 = new javax.swing.JLabel();
        lblSegmant1 = new javax.swing.JLabel();
        lblCountCells1 = new javax.swing.JLabel();
        lblMaximumRadius1 = new javax.swing.JLabel();
        lblMinimumRadius1 = new javax.swing.JLabel();
        lblCountCells3 = new javax.swing.JLabel();
        lblMaximumRadius3 = new javax.swing.JLabel();
        lblMinimumRadius3 = new javax.swing.JLabel();
        lblMaximumRadius2 = new javax.swing.JLabel();
        lblMinimumRadius2 = new javax.swing.JLabel();
        lblCountCells2 = new javax.swing.JLabel();
        lblMinimumRadius4 = new javax.swing.JLabel();
        lblMaximumRadius4 = new javax.swing.JLabel();
        lblCountCells4 = new javax.swing.JLabel();
        btnClse = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.LINE_AXIS));

        MainPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblSegmant2.setBackground(java.awt.SystemColor.controlShadow);
        lblSegmant2.setOpaque(true);
        MainPanel.add(lblSegmant2, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 10, 300, 200));

        lblSegmant3.setBackground(java.awt.SystemColor.controlShadow);
        lblSegmant3.setOpaque(true);
        MainPanel.add(lblSegmant3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 300, 300, 200));

        lblSegmant4.setBackground(java.awt.SystemColor.controlShadow);
        lblSegmant4.setOpaque(true);
        MainPanel.add(lblSegmant4, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 300, 300, 200));

        lblSegmant1.setBackground(java.awt.SystemColor.controlShadow);
        lblSegmant1.setOpaque(true);
        MainPanel.add(lblSegmant1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 300, 200));

        lblCountCells1.setFont(new java.awt.Font("Ubuntu", 0, 12)); // NOI18N
        lblCountCells1.setText("Cells Count               : ");
        MainPanel.add(lblCountCells1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 210, 230, -1));

        lblMaximumRadius1.setFont(new java.awt.Font("Ubuntu", 0, 12)); // NOI18N
        lblMaximumRadius1.setText("Maximum Radius    : ");
        MainPanel.add(lblMaximumRadius1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 230, 230, -1));

        lblMinimumRadius1.setFont(new java.awt.Font("Ubuntu", 0, 12)); // NOI18N
        lblMinimumRadius1.setText("Minimum Radius     : ");
        MainPanel.add(lblMinimumRadius1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 250, 230, -1));

        lblCountCells3.setFont(new java.awt.Font("Ubuntu", 0, 12)); // NOI18N
        lblCountCells3.setText("Cells Count             : ");
        MainPanel.add(lblCountCells3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 500, 220, -1));

        lblMaximumRadius3.setFont(new java.awt.Font("Ubuntu", 0, 12)); // NOI18N
        lblMaximumRadius3.setText("Maximum Radius  : ");
        MainPanel.add(lblMaximumRadius3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 520, 220, -1));

        lblMinimumRadius3.setFont(new java.awt.Font("Ubuntu", 0, 12)); // NOI18N
        lblMinimumRadius3.setText("Minimum Radius   : ");
        MainPanel.add(lblMinimumRadius3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 540, 220, -1));

        lblMaximumRadius2.setFont(new java.awt.Font("Ubuntu", 0, 12)); // NOI18N
        lblMaximumRadius2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblMaximumRadius2.setText(":       Maximum Radius");
        MainPanel.add(lblMaximumRadius2, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 230, 230, -1));

        lblMinimumRadius2.setFont(new java.awt.Font("Ubuntu", 0, 12)); // NOI18N
        lblMinimumRadius2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblMinimumRadius2.setText("       :        Minimum Radius");
        MainPanel.add(lblMinimumRadius2, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 250, 230, -1));

        lblCountCells2.setFont(new java.awt.Font("Ubuntu", 0, 12)); // NOI18N
        lblCountCells2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblCountCells2.setText("  :                  Cells Count");
        MainPanel.add(lblCountCells2, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 210, 230, -1));

        lblMinimumRadius4.setFont(new java.awt.Font("Ubuntu", 0, 12)); // NOI18N
        lblMinimumRadius4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblMinimumRadius4.setText("       :        Minimum Radius");
        MainPanel.add(lblMinimumRadius4, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 540, 230, -1));

        lblMaximumRadius4.setFont(new java.awt.Font("Ubuntu", 0, 12)); // NOI18N
        lblMaximumRadius4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblMaximumRadius4.setText(":       Maximum Radius");
        MainPanel.add(lblMaximumRadius4, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 520, 230, -1));

        lblCountCells4.setFont(new java.awt.Font("Ubuntu", 0, 12)); // NOI18N
        lblCountCells4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblCountCells4.setText("  :                  Cells Count");
        MainPanel.add(lblCountCells4, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 500, 230, -1));

        btnClse.setIcon(new javax.swing.ImageIcon(getClass().getResource("/uom/research/thalassemia/images/exit.png"))); // NOI18N
        btnClse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClseActionPerformed(evt);
            }
        });
        MainPanel.add(btnClse, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 10, -1, -1));

        getContentPane().add(MainPanel);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnClseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClseActionPerformed
        dispose();
    }//GEN-LAST:event_btnClseActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel MainPanel;
    private javax.swing.JButton btnClse;
    private javax.swing.JLabel lblCountCells1;
    private javax.swing.JLabel lblCountCells2;
    private javax.swing.JLabel lblCountCells3;
    private javax.swing.JLabel lblCountCells4;
    private javax.swing.JLabel lblMaximumRadius1;
    private javax.swing.JLabel lblMaximumRadius2;
    private javax.swing.JLabel lblMaximumRadius3;
    private javax.swing.JLabel lblMaximumRadius4;
    private javax.swing.JLabel lblMinimumRadius1;
    private javax.swing.JLabel lblMinimumRadius2;
    private javax.swing.JLabel lblMinimumRadius3;
    private javax.swing.JLabel lblMinimumRadius4;
    private javax.swing.JLabel lblSegmant1;
    private javax.swing.JLabel lblSegmant2;
    private javax.swing.JLabel lblSegmant3;
    private javax.swing.JLabel lblSegmant4;
    // End of variables declaration//GEN-END:variables
}
